// Code generated by mockery v2.52.2. DO NOT EDIT.

package detection

import mock "github.com/stretchr/testify/mock"

// MockListener is an autogenerated mock type for the Listener type
type MockListener[T Detectable] struct {
	mock.Mock
}

type MockListener_Expecter[T Detectable] struct {
	mock *mock.Mock
}

func (_m *MockListener[T]) EXPECT() *MockListener_Expecter[T] {
	return &MockListener_Expecter[T]{mock: &_m.Mock}
}

// Listen provides a mock function with given fields: responder
func (_m *MockListener[T]) Listen(responder Responder[T]) {
	_m.Called(responder)
}

// MockListener_Listen_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Listen'
type MockListener_Listen_Call[T Detectable] struct {
	*mock.Call
}

// Listen is a helper method to define mock.On call
//   - responder Responder[T]
func (_e *MockListener_Expecter[T]) Listen(responder interface{}) *MockListener_Listen_Call[T] {
	return &MockListener_Listen_Call[T]{Call: _e.mock.On("Listen", responder)}
}

func (_c *MockListener_Listen_Call[T]) Run(run func(responder Responder[T])) *MockListener_Listen_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(Responder[T]))
	})
	return _c
}

func (_c *MockListener_Listen_Call[T]) Return() *MockListener_Listen_Call[T] {
	_c.Call.Return()
	return _c
}

func (_c *MockListener_Listen_Call[T]) RunAndReturn(run func(Responder[T])) *MockListener_Listen_Call[T] {
	_c.Run(run)
	return _c
}

// NewMockListener creates a new instance of MockListener. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockListener[T Detectable](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockListener[T] {
	mock := &MockListener[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
