// Code generated by mockery v2.52.2. DO NOT EDIT.

package processor

import (
	context "context"

	v1 "github.com/kjkondratuk/kinetiq/gen/kinetiq/v1"
	mock "github.com/stretchr/testify/mock"
)

// MockProcessor is an autogenerated mock type for the Processor type
type MockProcessor struct {
	mock.Mock
}

type MockProcessor_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProcessor) EXPECT() *MockProcessor_Expecter {
	return &MockProcessor_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with no fields
func (_m *MockProcessor) Close() {
	_m.Called()
}

// MockProcessor_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockProcessor_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockProcessor_Expecter) Close() *MockProcessor_Close_Call {
	return &MockProcessor_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockProcessor_Close_Call) Run(run func()) *MockProcessor_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockProcessor_Close_Call) Return() *MockProcessor_Close_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockProcessor_Close_Call) RunAndReturn(run func()) *MockProcessor_Close_Call {
	_c.Run(run)
	return _c
}

// Output provides a mock function with no fields
func (_m *MockProcessor) Output() <-chan Result {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Output")
	}

	var r0 <-chan Result
	if rf, ok := ret.Get(0).(func() <-chan Result); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan Result)
		}
	}

	return r0
}

// MockProcessor_Output_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Output'
type MockProcessor_Output_Call struct {
	*mock.Call
}

// Output is a helper method to define mock.On call
func (_e *MockProcessor_Expecter) Output() *MockProcessor_Output_Call {
	return &MockProcessor_Output_Call{Call: _e.mock.On("Output")}
}

func (_c *MockProcessor_Output_Call) Run(run func()) *MockProcessor_Output_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockProcessor_Output_Call) Return(_a0 <-chan Result) *MockProcessor_Output_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProcessor_Output_Call) RunAndReturn(run func() <-chan Result) *MockProcessor_Output_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields: ctx
func (_m *MockProcessor) Start(ctx context.Context) {
	_m.Called(ctx)
}

// MockProcessor_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockProcessor_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockProcessor_Expecter) Start(ctx interface{}) *MockProcessor_Start_Call {
	return &MockProcessor_Start_Call{Call: _e.mock.On("Start", ctx)}
}

func (_c *MockProcessor_Start_Call) Run(run func(ctx context.Context)) *MockProcessor_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockProcessor_Start_Call) Return() *MockProcessor_Start_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockProcessor_Start_Call) RunAndReturn(run func(context.Context)) *MockProcessor_Start_Call {
	_c.Run(run)
	return _c
}

// Update provides a mock function with given fields: module
func (_m *MockProcessor) Update(module v1.ModuleService) {
	_m.Called(module)
}

// MockProcessor_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockProcessor_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - module v1.ModuleService
func (_e *MockProcessor_Expecter) Update(module interface{}) *MockProcessor_Update_Call {
	return &MockProcessor_Update_Call{Call: _e.mock.On("Update", module)}
}

func (_c *MockProcessor_Update_Call) Run(run func(module v1.ModuleService)) *MockProcessor_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(v1.ModuleService))
	})
	return _c
}

func (_c *MockProcessor_Update_Call) Return() *MockProcessor_Update_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockProcessor_Update_Call) RunAndReturn(run func(v1.ModuleService)) *MockProcessor_Update_Call {
	_c.Run(run)
	return _c
}

// NewMockProcessor creates a new instance of MockProcessor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProcessor(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProcessor {
	mock := &MockProcessor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
