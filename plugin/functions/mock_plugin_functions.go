// Code generated by mockery v2.52.2. DO NOT EDIT.

package functions

import (
	context "context"

	v1 "github.com/kjkondratuk/kinetiq/gen/kinetiq/v1"
	mock "github.com/stretchr/testify/mock"
)

// MockPluginFunctions is an autogenerated mock type for the PluginFunctions type
type MockPluginFunctions struct {
	mock.Mock
}

type MockPluginFunctions_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPluginFunctions) EXPECT() *MockPluginFunctions_Expecter {
	return &MockPluginFunctions_Expecter{mock: &_m.Mock}
}

// HttpGet provides a mock function with given fields: ctx, request
func (_m *MockPluginFunctions) HttpGet(ctx context.Context, request *v1.HttpGetRequest) (*v1.HttpGetResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for HttpGet")
	}

	var r0 *v1.HttpGetResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.HttpGetRequest) (*v1.HttpGetResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.HttpGetRequest) *v1.HttpGetResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.HttpGetResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.HttpGetRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPluginFunctions_HttpGet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HttpGet'
type MockPluginFunctions_HttpGet_Call struct {
	*mock.Call
}

// HttpGet is a helper method to define mock.On call
//   - ctx context.Context
//   - request *v1.HttpGetRequest
func (_e *MockPluginFunctions_Expecter) HttpGet(ctx interface{}, request interface{}) *MockPluginFunctions_HttpGet_Call {
	return &MockPluginFunctions_HttpGet_Call{Call: _e.mock.On("HttpGet", ctx, request)}
}

func (_c *MockPluginFunctions_HttpGet_Call) Run(run func(ctx context.Context, request *v1.HttpGetRequest)) *MockPluginFunctions_HttpGet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v1.HttpGetRequest))
	})
	return _c
}

func (_c *MockPluginFunctions_HttpGet_Call) Return(_a0 *v1.HttpGetResponse, _a1 error) *MockPluginFunctions_HttpGet_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPluginFunctions_HttpGet_Call) RunAndReturn(run func(context.Context, *v1.HttpGetRequest) (*v1.HttpGetResponse, error)) *MockPluginFunctions_HttpGet_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPluginFunctions creates a new instance of MockPluginFunctions. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPluginFunctions(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPluginFunctions {
	mock := &MockPluginFunctions{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
