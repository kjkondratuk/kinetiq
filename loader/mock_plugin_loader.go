// Code generated by mockery v2.52.2. DO NOT EDIT.

package loader

import (
	context "context"
	sync "sync"

	mock "github.com/stretchr/testify/mock"
)

// MockpluginLoader is an autogenerated mock type for the pluginLoader type
type MockpluginLoader struct {
	mock.Mock
}

type MockpluginLoader_Expecter struct {
	mock *mock.Mock
}

func (_m *MockpluginLoader) EXPECT() *MockpluginLoader_Expecter {
	return &MockpluginLoader_Expecter{mock: &_m.Mock}
}

// load provides a mock function with given fields: ctx, mutex, path
func (_m *MockpluginLoader) load(ctx context.Context, mutex *sync.Mutex, path string) (closeablePlugin, error) {
	ret := _m.Called(ctx, mutex, path)

	if len(ret) == 0 {
		panic("no return value specified for load")
	}

	var r0 closeablePlugin
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sync.Mutex, string) (closeablePlugin, error)); ok {
		return rf(ctx, mutex, path)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sync.Mutex, string) closeablePlugin); ok {
		r0 = rf(ctx, mutex, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(closeablePlugin)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sync.Mutex, string) error); ok {
		r1 = rf(ctx, mutex, path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockpluginLoader_load_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'load'
type MockpluginLoader_load_Call struct {
	*mock.Call
}

// load is a helper method to define mock.On call
//   - ctx context.Context
//   - mutex *sync.Mutex
//   - path string
func (_e *MockpluginLoader_Expecter) load(ctx interface{}, mutex interface{}, path interface{}) *MockpluginLoader_load_Call {
	return &MockpluginLoader_load_Call{Call: _e.mock.On("load", ctx, mutex, path)}
}

func (_c *MockpluginLoader_load_Call) Run(run func(ctx context.Context, mutex *sync.Mutex, path string)) *MockpluginLoader_load_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*sync.Mutex), args[2].(string))
	})
	return _c
}

func (_c *MockpluginLoader_load_Call) Return(_a0 closeablePlugin, _a1 error) *MockpluginLoader_load_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockpluginLoader_load_Call) RunAndReturn(run func(context.Context, *sync.Mutex, string) (closeablePlugin, error)) *MockpluginLoader_load_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockpluginLoader creates a new instance of MockpluginLoader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockpluginLoader(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockpluginLoader {
	mock := &MockpluginLoader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
