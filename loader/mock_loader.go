// Code generated by mockery v2.52.2. DO NOT EDIT.

package loader

import (
	context "context"

	v1 "github.com/kjkondratuk/kinetiq/gen/kinetiq/v1"
	mock "github.com/stretchr/testify/mock"
)

// MockLoader is an autogenerated mock type for the Loader type
type MockLoader struct {
	mock.Mock
}

type MockLoader_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLoader) EXPECT() *MockLoader_Expecter {
	return &MockLoader_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields: ctx
func (_m *MockLoader) Close(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLoader_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockLoader_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockLoader_Expecter) Close(ctx interface{}) *MockLoader_Close_Call {
	return &MockLoader_Close_Call{Call: _e.mock.On("Close", ctx)}
}

func (_c *MockLoader_Close_Call) Run(run func(ctx context.Context)) *MockLoader_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockLoader_Close_Call) Return(_a0 error) *MockLoader_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLoader_Close_Call) RunAndReturn(run func(context.Context) error) *MockLoader_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx
func (_m *MockLoader) Get(ctx context.Context) (v1.ModuleService, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 v1.ModuleService
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (v1.ModuleService, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) v1.ModuleService); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1.ModuleService)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLoader_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockLoader_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockLoader_Expecter) Get(ctx interface{}) *MockLoader_Get_Call {
	return &MockLoader_Get_Call{Call: _e.mock.On("Get", ctx)}
}

func (_c *MockLoader_Get_Call) Run(run func(ctx context.Context)) *MockLoader_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockLoader_Get_Call) Return(_a0 v1.ModuleService, _a1 error) *MockLoader_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLoader_Get_Call) RunAndReturn(run func(context.Context) (v1.ModuleService, error)) *MockLoader_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Reload provides a mock function with given fields: ctx
func (_m *MockLoader) Reload(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Reload")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLoader_Reload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Reload'
type MockLoader_Reload_Call struct {
	*mock.Call
}

// Reload is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockLoader_Expecter) Reload(ctx interface{}) *MockLoader_Reload_Call {
	return &MockLoader_Reload_Call{Call: _e.mock.On("Reload", ctx)}
}

func (_c *MockLoader_Reload_Call) Run(run func(ctx context.Context)) *MockLoader_Reload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockLoader_Reload_Call) Return(_a0 error) *MockLoader_Reload_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLoader_Reload_Call) RunAndReturn(run func(context.Context) error) *MockLoader_Reload_Call {
	_c.Call.Return(run)
	return _c
}

// Resolve provides a mock function with given fields: ctx
func (_m *MockLoader) Resolve(ctx context.Context) {
	_m.Called(ctx)
}

// MockLoader_Resolve_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Resolve'
type MockLoader_Resolve_Call struct {
	*mock.Call
}

// Resolve is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockLoader_Expecter) Resolve(ctx interface{}) *MockLoader_Resolve_Call {
	return &MockLoader_Resolve_Call{Call: _e.mock.On("Resolve", ctx)}
}

func (_c *MockLoader_Resolve_Call) Run(run func(ctx context.Context)) *MockLoader_Resolve_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockLoader_Resolve_Call) Return() *MockLoader_Resolve_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLoader_Resolve_Call) RunAndReturn(run func(context.Context)) *MockLoader_Resolve_Call {
	_c.Run(run)
	return _c
}

// NewMockLoader creates a new instance of MockLoader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLoader(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLoader {
	mock := &MockLoader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
