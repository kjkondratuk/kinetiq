// Code generated by mockery v2.52.2. DO NOT EDIT.

package v1

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockmoduleService is an autogenerated mock type for the moduleService type
type MockmoduleService struct {
	mock.Mock
}

type MockmoduleService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockmoduleService) EXPECT() *MockmoduleService_Expecter {
	return &MockmoduleService_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields: ctx
func (_m *MockmoduleService) Close(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockmoduleService_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockmoduleService_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockmoduleService_Expecter) Close(ctx interface{}) *MockmoduleService_Close_Call {
	return &MockmoduleService_Close_Call{Call: _e.mock.On("Close", ctx)}
}

func (_c *MockmoduleService_Close_Call) Run(run func(ctx context.Context)) *MockmoduleService_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockmoduleService_Close_Call) Return(_a0 error) *MockmoduleService_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockmoduleService_Close_Call) RunAndReturn(run func(context.Context) error) *MockmoduleService_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Process provides a mock function with given fields: _a0, _a1
func (_m *MockmoduleService) Process(_a0 context.Context, _a1 *ProcessRequest) (*ProcessResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Process")
	}

	var r0 *ProcessResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ProcessRequest) (*ProcessResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ProcessRequest) *ProcessResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ProcessResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ProcessRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockmoduleService_Process_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Process'
type MockmoduleService_Process_Call struct {
	*mock.Call
}

// Process is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *ProcessRequest
func (_e *MockmoduleService_Expecter) Process(_a0 interface{}, _a1 interface{}) *MockmoduleService_Process_Call {
	return &MockmoduleService_Process_Call{Call: _e.mock.On("Process", _a0, _a1)}
}

func (_c *MockmoduleService_Process_Call) Run(run func(_a0 context.Context, _a1 *ProcessRequest)) *MockmoduleService_Process_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*ProcessRequest))
	})
	return _c
}

func (_c *MockmoduleService_Process_Call) Return(_a0 *ProcessResponse, _a1 error) *MockmoduleService_Process_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockmoduleService_Process_Call) RunAndReturn(run func(context.Context, *ProcessRequest) (*ProcessResponse, error)) *MockmoduleService_Process_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockmoduleService creates a new instance of MockmoduleService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockmoduleService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockmoduleService {
	mock := &MockmoduleService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
