// Code generated by mockery v2.52.2. DO NOT EDIT.

package kafka

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	kgo "github.com/twmb/franz-go/pkg/kgo"
)

// MockKafkaClient is an autogenerated mock type for the KafkaClient type
type MockKafkaClient struct {
	mock.Mock
}

type MockKafkaClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockKafkaClient) EXPECT() *MockKafkaClient_Expecter {
	return &MockKafkaClient_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with no fields
func (_m *MockKafkaClient) Close() {
	_m.Called()
}

// MockKafkaClient_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockKafkaClient_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockKafkaClient_Expecter) Close() *MockKafkaClient_Close_Call {
	return &MockKafkaClient_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockKafkaClient_Close_Call) Run(run func()) *MockKafkaClient_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockKafkaClient_Close_Call) Return() *MockKafkaClient_Close_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockKafkaClient_Close_Call) RunAndReturn(run func()) *MockKafkaClient_Close_Call {
	_c.Run(run)
	return _c
}

// Produce provides a mock function with given fields: ctx, record, cb
func (_m *MockKafkaClient) Produce(ctx context.Context, record *kgo.Record, cb func(*kgo.Record, error)) {
	_m.Called(ctx, record, cb)
}

// MockKafkaClient_Produce_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Produce'
type MockKafkaClient_Produce_Call struct {
	*mock.Call
}

// Produce is a helper method to define mock.On call
//   - ctx context.Context
//   - record *kgo.Record
//   - cb func(*kgo.Record , error)
func (_e *MockKafkaClient_Expecter) Produce(ctx interface{}, record interface{}, cb interface{}) *MockKafkaClient_Produce_Call {
	return &MockKafkaClient_Produce_Call{Call: _e.mock.On("Produce", ctx, record, cb)}
}

func (_c *MockKafkaClient_Produce_Call) Run(run func(ctx context.Context, record *kgo.Record, cb func(*kgo.Record, error))) *MockKafkaClient_Produce_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*kgo.Record), args[2].(func(*kgo.Record, error)))
	})
	return _c
}

func (_c *MockKafkaClient_Produce_Call) Return() *MockKafkaClient_Produce_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockKafkaClient_Produce_Call) RunAndReturn(run func(context.Context, *kgo.Record, func(*kgo.Record, error))) *MockKafkaClient_Produce_Call {
	_c.Run(run)
	return _c
}

// NewMockKafkaClient creates a new instance of MockKafkaClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockKafkaClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockKafkaClient {
	mock := &MockKafkaClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
