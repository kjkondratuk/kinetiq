// Code generated by mockery v2.52.2. DO NOT EDIT.

package source

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockSource is an autogenerated mock type for the Source type
type MockSource struct {
	mock.Mock
}

type MockSource_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSource) EXPECT() *MockSource_Expecter {
	return &MockSource_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with no fields
func (_m *MockSource) Close() {
	_m.Called()
}

// MockSource_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockSource_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockSource_Expecter) Close() *MockSource_Close_Call {
	return &MockSource_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockSource_Close_Call) Run(run func()) *MockSource_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSource_Close_Call) Return() *MockSource_Close_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockSource_Close_Call) RunAndReturn(run func()) *MockSource_Close_Call {
	_c.Run(run)
	return _c
}

// Disable provides a mock function with no fields
func (_m *MockSource) Disable() {
	_m.Called()
}

// MockSource_Disable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Disable'
type MockSource_Disable_Call struct {
	*mock.Call
}

// Disable is a helper method to define mock.On call
func (_e *MockSource_Expecter) Disable() *MockSource_Disable_Call {
	return &MockSource_Disable_Call{Call: _e.mock.On("Disable")}
}

func (_c *MockSource_Disable_Call) Run(run func()) *MockSource_Disable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSource_Disable_Call) Return() *MockSource_Disable_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockSource_Disable_Call) RunAndReturn(run func()) *MockSource_Disable_Call {
	_c.Run(run)
	return _c
}

// Enable provides a mock function with no fields
func (_m *MockSource) Enable() {
	_m.Called()
}

// MockSource_Enable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Enable'
type MockSource_Enable_Call struct {
	*mock.Call
}

// Enable is a helper method to define mock.On call
func (_e *MockSource_Expecter) Enable() *MockSource_Enable_Call {
	return &MockSource_Enable_Call{Call: _e.mock.On("Enable")}
}

func (_c *MockSource_Enable_Call) Run(run func()) *MockSource_Enable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSource_Enable_Call) Return() *MockSource_Enable_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockSource_Enable_Call) RunAndReturn(run func()) *MockSource_Enable_Call {
	_c.Run(run)
	return _c
}

// Output provides a mock function with no fields
func (_m *MockSource) Output() <-chan Record {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Output")
	}

	var r0 <-chan Record
	if rf, ok := ret.Get(0).(func() <-chan Record); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan Record)
		}
	}

	return r0
}

// MockSource_Output_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Output'
type MockSource_Output_Call struct {
	*mock.Call
}

// Output is a helper method to define mock.On call
func (_e *MockSource_Expecter) Output() *MockSource_Output_Call {
	return &MockSource_Output_Call{Call: _e.mock.On("Output")}
}

func (_c *MockSource_Output_Call) Run(run func()) *MockSource_Output_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSource_Output_Call) Return(_a0 <-chan Record) *MockSource_Output_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSource_Output_Call) RunAndReturn(run func() <-chan Record) *MockSource_Output_Call {
	_c.Call.Return(run)
	return _c
}

// Read provides a mock function with given fields: ctx
func (_m *MockSource) Read(ctx context.Context) {
	_m.Called(ctx)
}

// MockSource_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type MockSource_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSource_Expecter) Read(ctx interface{}) *MockSource_Read_Call {
	return &MockSource_Read_Call{Call: _e.mock.On("Read", ctx)}
}

func (_c *MockSource_Read_Call) Run(run func(ctx context.Context)) *MockSource_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockSource_Read_Call) Return() *MockSource_Read_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockSource_Read_Call) RunAndReturn(run func(context.Context)) *MockSource_Read_Call {
	_c.Run(run)
	return _c
}

// NewMockSource creates a new instance of MockSource. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSource(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSource {
	mock := &MockSource{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
